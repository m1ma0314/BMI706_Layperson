import altair as alt
import pandas as pd

alt.data_transformers.disable_max_rows()

df = pd.read_csv('averaged_4topics.csv')  

df.columns = df.columns.str.strip().str.replace(' ', '_')
df['Data_Value'] = pd.to_numeric(df['Data_Value'], errors='coerce')


regions = {
    'Northeast': ['Maine', 'New Hampshire', 'Vermont', 'Massachusetts', 'Rhode Island', 'Connecticut', 'New York', 'New Jersey', 'Pennsylvania'],
    'Midwest': ['Ohio', 'Indiana', 'Illinois', 'Michigan', 'Wisconsin', 'Minnesota', 'Iowa', 'Missouri', 'North Dakota', 'South Dakota', 'Nebraska', 'Kansas'],
    'South': ['Delaware', 'Maryland', 'District_of_Columbia', 'Virginia', 'West Virginia', 'North Carolina', 'South Carolina', 'Georgia', 'Florida', 'Kentucky', 'Tennessee', 'Mississippi', 'Alabama', 'Oklahoma', 'Texas', 'Arkansas', 'Louisiana'],
    'West': ['Idaho', 'Montana', 'Wyoming', 'Nevada', 'Utah', 'Colorado', 'Arizona', 'New Mexico', 'Alaska', 'Washington', 'Oregon', 'California', 'Hawaii']
}

state_to_region = {state: region for region, states in regions.items() for state in states}

df['Region'] = df['LocationDesc'].map(state_to_region)

df_filtered = df.dropna(subset=['Region'])

df_filtered['Data_Value'] = df_filtered['Data_Value'].fillna(0)

# Group by region and class (topics) to calculate the average percentage for each region
df_aggregated_region = df_filtered.groupby(['Region', 'Class'], as_index=False).agg({'Data_Value': 'mean'})

# Group by state to calculate the average percentage for each state
df_aggregated_state = df_filtered.groupby(['LocationDesc', 'Region', 'Class'], as_index=False).agg({'Data_Value': 'mean'})

# Regional bar chart with topic selector
topic_selection = alt.selection_point(fields=['Class'], bind='legend')  

grouped_bar = alt.Chart(df_aggregated_region).mark_bar().encode(
    x=alt.X('Region:N', title='Region', axis=alt.Axis(labelAngle=0)),  
    y=alt.Y('Data_Value:Q', title='Avg. Engagement (%)', scale=alt.Scale(domain=[0, 50])),
    color=alt.Color('Class:N', title='Discussion Topic'), 
    xOffset=alt.XOffset('Class:N'),  
    tooltip=[alt.Tooltip('Region:N'), alt.Tooltip('Class:N', title='Topic'), alt.Tooltip('Data_Value:Q', title='Avg. Engagement (%)')]
).add_params(
    topic_selection  
).properties(
    width=400,  
    height=400,
    title="Grouped Bar Chart of Topic Engagement by Region"
)

# State-level bar chart for selected topic
state_bar = alt.Chart(df_aggregated_state).mark_bar().encode(
    x=alt.X('LocationDesc:N', title='State', sort=alt.EncodingSortField(field='Data_Value', op='mean', order='descending')),  # Sort by average engagement
    y=alt.Y('Data_Value:Q', title='Avg. Engagement (%)', scale=alt.Scale(domain=[0, 50]), stack=None), 
    color=alt.Color('Class:N', title='Discussion Topic'),  
    tooltip=[alt.Tooltip('LocationDesc:N', title='State'), alt.Tooltip('Class:N', title='Topic'), alt.Tooltip('Data_Value:Q', title='Avg. Engagement (%)')]
).transform_filter(
    topic_selection  
).properties(
    width=600,
    height=400,
    title="State-Level Engagement in Selected Topic"
)

# Combine the two charts into a linked view
linked_dashboard = alt.vconcat(
    grouped_bar,
    state_bar
)

linked_dashboard.display()
